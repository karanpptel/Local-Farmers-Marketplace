// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String        @unique
  password      String?
  image         String?
  emailVerified DateTime?  // ⬅ Added for NextAuth
  role          Role           @default(CUSTOMER)
  // Relations
  products      Product[] // Farmer's products
  orders        Order[] // Customer's orders
  notifications Notification[]

  // NextAuth relations
  accounts Account[]  // ⬅ Needed for OAuth
  sessions Session[]  // ⬅ Needed for OAuth

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  quantity    Int
  category    Category
  location    String
  image       String?
  stock       Int        @default(0)
  farmer      User     @relation(fields: [farmerId], references: [id])
  farmerId    String
  orderItems  OrderItem[] // <-- Opposite relation for OrderItem
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  totalAmount Decimal     @db.Decimal(10, 2)
  status      OrderStatus @default(PENDING)
  payments    Payment[]   // Order can have multiple payments (partial, retry, etc.)
  idempotencyKey String?     @unique // To prevent duplicate orders
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}


model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2) // Price snapshot at order time
}

model Payment {
  id             String   @id @default(cuid())
  order          Order    @relation(fields: [orderId], references: [id])
  orderId        String
  stripePaymentId String  // Stripe PaymentIntent ID
  amount         Decimal  @db.Decimal(10, 2)
  currency       String   @default("usd")
  status         PaymentStatus @default(PENDING) // maps Stripe payment status
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}


enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}



model Notification {
  id        String   @id @default(cuid())
  message   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

enum Role {
  CUSTOMER
  FARMER
  ADMIN
}

enum Category {
  FRUITS
  VEGETABLES
  GRAINS
  DAIRY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

// ========================
// NextAuth required models
// ========================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text  //use db.text because it store large OAuth token
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
